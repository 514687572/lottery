package com.stip.net.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;

import com.stip.net.entity.LotteryUser;
import com.stip.net.entity.UserBetRecords;
import com.stip.net.service.AccountService;
import com.stip.net.service.LotteryUserService;

/**
 * 用户相关操作
 *
 * @author zl
 */
@Scope("request")
@RequestMapping("/user")
@RestController
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = {RuntimeException.class, Exception.class})
public class LotteryUserController {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    public LotteryUserService lotteryUserService;
    @Autowired
    public AccountService accountService;
    @Autowired
    private SessionLocaleResolver localeResolver;
    @Autowired
    private ReloadableResourceBundleMessageSource messageSource;

    /**
     * 获取用户信息  邀请码等
     *
     * @param request
     * @return
     */
    @PostMapping("/getUser.do")
    public Map<String, Object> getUser(HttpServletRequest request) throws Exception {
        Map<String, Object> jsonResult = new HashMap<String, Object>(1);

        String userName = request.getParameter("userName");
        if (StringUtils.isBlank(userName)) {
            return jsonResult;
        }
        LotteryUser lotteryUser = new LotteryUser();
        lotteryUser.setUserName(userName);
        lotteryUser = lotteryUserService.getlotteryUser(lotteryUser);

        // 清空私钥
        lotteryUser.setUserKey(null);
        jsonResult.put("user", lotteryUser);
        return jsonResult;
    }

    /**
     * 接受邀请
     *
     * @param request
     * @return
     */
    @PostMapping("/accept.do")
    public Map<String, Object> accept(HttpServletRequest request) throws Exception {
        Map<String, Object> jsonResult = new HashMap<String, Object>(1);
        // 当前用户
        String userName = request.getParameter("userName").toString();
        // 推荐人的邀请码
        String userCode = request.getParameter("userCode").toString();
//        // 当前用户
//        String userName = user.getUserName();
//        // 推荐人的邀请码
//        String userCode = user.getUserCode();
        if (StringUtils.isBlank(userName)) {
            logger.error("Error in user login");
            return null;
        }

        Locale locale = localeResolver.resolveLocale(request);

        LotteryUser lotteryUser = new LotteryUser();
        lotteryUser.setUserName(userName);
        lotteryUser = lotteryUserService.getlotteryUser(lotteryUser);

        if (lotteryUser == null) {
            logger.error("用户信息不正确");
            return null;
        } else if (lotteryUser.getReferrer() != null) {
            logger.error("重复的邀请");
            return null;
        }

        LotteryUser invitationUser = new LotteryUser();
        invitationUser.setUserCode(userCode);
        invitationUser = lotteryUserService.getlotteryUser(invitationUser);

        if (invitationUser != null) {
            LotteryUser newUser = new LotteryUser();
            newUser.setUserId(lotteryUser.getUserId());
            newUser.setReferrer(invitationUser.getUserId());
            lotteryUserService.updateByPrimaryKeySelective(newUser);
            jsonResult.put("msg",  messageSource.getMessage("yes", null, locale));
        }

        return jsonResult;
    }


    /**
     * 我的下级列表
     *
     * @param request
     * @return
     * @throws InterruptedException
     */
    @GetMapping("/getMyChilds.do")
    public Map<String, Object> getMyChilds(HttpServletRequest request) {
        Map<String, Object> jsonResult = new HashMap<String, Object>(1);
        String userName = request.getParameter("userName");
        if (StringUtils.isBlank(userName)) {
            return null;
        }
        int pageNum = Integer.parseInt(StringUtils.isBlank(request.getParameter("pageNum")) ? "0" : request.getParameter("pageNum"));
        int records = Integer.parseInt(StringUtils.isBlank(request.getParameter("records")) ? "10" : request.getParameter("records"));
        jsonResult = lotteryUserService.getMyChilds(userName, pageNum,records);
        return jsonResult;
    }
    
    /**
     * 我的下级列表
     * dice
     * @param request
     * @return
     * @throws InterruptedException
     */
    @GetMapping("/getMyChildsto.do")
    public Map<String, Object> getMyChildsto(HttpServletRequest request) {
        Map<String, Object> jsonResult = new HashMap<String, Object>(1);
        List<Map<String, Object>> list=new ArrayList<>();
        String userName = request.getParameter("userName");
        if (StringUtils.isBlank(userName)) {
            return null;
        }
        int pageNum = Integer.parseInt(StringUtils.isBlank(request.getParameter("pageNum")) ? "0" : request.getParameter("pageNum"));
        int records = Integer.parseInt(StringUtils.isBlank(request.getParameter("records")) ? "10" : request.getParameter("records"));
        jsonResult = lotteryUserService.getMyChilds(userName, pageNum,records);
        List<UserBetRecords> results = (List<UserBetRecords>) jsonResult.get("childs");
        if(results.size()>0){
        	for(int a=0;a<results.size();a++){
        		Map<String, Object> map=new HashMap<>();
        		map.put("name", results.get(a).getUserName());
        		map.put("money", results.get(a).getNoteMoney());
        		map.put("num", (a+1)+(Integer.parseInt(request.getParameter("pageNum"))-1)*10);
        		list.add(map);
        	}
        }
        jsonResult.put("msg", list);
        jsonResult.remove("childs");
        return jsonResult;
    }
    
}
