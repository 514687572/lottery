package com.stip.net.scheduled;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;

import com.lottery.net.utils.Constants;
import com.stip.net.entity.LotteryExc;
import com.stip.net.example.LotteryExcExample;
import com.stip.net.service.*;
import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Component;

import com.stip.net.entity.LotteryConfirm;
import com.stip.net.entity.LotteryRecords;
import com.stip.net.entity.UserBetRecords;
import com.stip.net.imessage.IMWebSocketHandler;
import com.stip.net.kafka.utils.PublicMethod;

@Component
@Lazy(false)
public class TaskScheduledController {
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    @Autowired
    private ConfirmService confirmService;
    @Autowired
    private IMWebSocketHandler handler;
    @Autowired
    private ThreadPoolTaskExecutor threadPoolTaskExecutor;
    @Autowired
    private UserBetService userBetService;
    @Autowired
    private AccountService accountService;
    @Autowired
    private LotteryService lotteryService;
    @Autowired
    private LotteryUserService lotteryUserService;
    @Autowired
    private UserTransactionRecordsService userTransactionRecordsService;
    @Autowired
    private LotteryExcService lotteryExcService;

    @Scheduled(cron = "0 0/1 * * * ?")
    public void updateUserBetRecords() throws Exception {
        logger.info("执行补发奖操作");
        List<LotteryConfirm> list = confirmService.selectByExample();

        if (list == null) {
            return;
        }

        for (LotteryConfirm confirm : list) {
            List<UserBetRecords> records = userBetService.getUserBetByRecordId(confirm.getConfirmId());

            if (records != null) {
                UserBetRecords currentRecord = records.get(0);
                LotteryRecords lotteryRecord = lotteryService.getLotteryById(currentRecord.getBetNum());

                threadPoolTaskExecutor.execute(new Runnable() {
                    public void run() {
                        PublicMethod.senPrizeMsg(lotteryRecord, new Date(), userBetService, accountService, logger, handler, userTransactionRecordsService);
                        //  新用户奖励
                        PublicMethod.newUser(currentRecord.getUserName(), userBetService, lotteryUserService, accountService, logger, currentRecord.getBetNum(),
                                Constants.GAME_TYPE_LOTTERY, userTransactionRecordsService);
                        //  邀请奖励发放
                        BigDecimal b = new BigDecimal(currentRecord.getNoteMoney());
                        PublicMethod.invitationAward(b, currentRecord.getUserName(), lotteryUserService, accountService, logger, currentRecord.getBetNum(),
                                Constants.GAME_TYPE_LOTTERY, userTransactionRecordsService);
                        confirmService.deleteByPrimaryKey(confirm.getConfirmId());
                    }
                });
            } else {
                continue;
            }
        }
    }

    @Scheduled(cron = "0 0 0/1 * * ?")
    public void deleteUnPrize() throws Exception {
        logger.info("执行删除未中奖的投注记录拆分信息");

        int count = userBetService.getUserUnPrizeRecords();

        if (count > 0) {
            logger.info("清理数据结束");
        }
    }

    /**
     * 执行转账失败补发操作
     *
     * @throws Exception
     */
    @Scheduled(cron = "30 0/1 * * * ?")
    public void updateLotteryExc() throws Exception {
        logger.info("执行转账失败补发操作");
        LotteryExcExample excExample = new LotteryExcExample();
        excExample.createCriteria().andIsplusEqualTo(1);
        excExample.createCriteria().andExcStatusEqualTo(Constants.GENERAL_ZERO);
        List<LotteryExc> list = lotteryExcService.selectLotteryExcByExample(excExample);

        if (CollectionUtils.isEmpty(list)) {
            return;
        }

        for (LotteryExc lotteryExc : list) {
            threadPoolTaskExecutor.execute(new Runnable() {
                public void run() {
                    StringBuffer key = new StringBuffer("");
                    StringBuffer account = new StringBuffer("");
                    if (Constants.GAME_TYPE_LOTTERY.equals(lotteryExc.getGameType())) {
                        key.append(Constants.eosjs_prive_key);
                        account.append(Constants.account);
                    } else if (Constants.GAME_TYPE_TIGER.equals(lotteryExc.getGameType())) {
                        key.append(Constants.eosjs_prive_key_tiger);
                        account.append(Constants.account_tiger);
                    } else if (Constants.GAME_TYPE_DICE.equals(lotteryExc.getGameType())) {
                        key.append(Constants.eosjs_prive_key_dice);
                        account.append(Constants.account_dice);
                    }
                    String result = new DecimalFormat("0.0000")
                            .format(lotteryExc.getAmount().setScale(4, BigDecimal.ROUND_HALF_DOWN).doubleValue()).toString();

                    boolean b = true;
                    try {
                        b = accountService.plusBalanceLotterExc(key.toString(), account.toString(), lotteryExc.getUserName(), result);
                    } catch (InterruptedException e) {
                        b = false;
                        logger.error("执行转账失败补发操作失败  excId:" + lotteryExc.getExcId());
                    } finally {
                        if (!b) {
                            lotteryExc.setExcCount(lotteryExc.getExcCount()+1);
                        }else {
                            lotteryExc.setExcStatus(Constants.GENERAL_ONE);
                        }
                        try {
                            lotteryExcService.updateLotteryExcByPrimaryKeySelective(lotteryExc);
                        } catch (Exception e) {
                            logger.error("更新失败支付记录失败  excId:" + lotteryExc.getExcId());
                            logger.error(e.toString());
                        }
                    }
                }
            });
        }
    }
}