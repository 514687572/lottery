package com.stip.net.scheduled;

import java.math.BigDecimal;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.stip.net.entity.DBDiceBetting;
import com.stip.net.entity.tiger.TigerPutRecord;
import com.stip.net.main.MainData;
import com.stip.net.service.AccountService;
import com.stip.net.service.LotteryService;
import com.stip.net.service.TigerService;

@Component
public class Min1Task {
	protected final Logger _log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private TigerService tigerService;
	@Autowired
	private AccountService accountService;
	@Autowired 
	private LotteryService lotteryService;

	@Scheduled(cron = "0 0/1 * * * ?")
	public void execute() {
		reissuePrizeEOS();
		fixTigerReward();
		saveAll();
	}

	/**
	 * 定时存储游戏数据
	 */
	private void saveAll() {
		try {
			_log.info("save All start..................................");
			tigerService.saveAllRooms(MainData.tigerRooms);
			_log.info("save All over..................................");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 骰子补发奖励
	 */
	private void reissuePrizeEOS() {
		try {
			List<DBDiceBetting> diceBettings = lotteryService.getDiceState();
			if (diceBettings.size() > 0) {
				_log.info("执行骰子补发奖励操作");
				for (DBDiceBetting ddb : diceBettings) {
					try {
						if (accountService.plusBalanceFromDice(ddb.getAccount(), ddb.getPrizeEOS())) {
							lotteryService.updateDiceStateto(ddb.getAccount());
						} else {
							_log.error("骰子给用户：" + ddb.getAccount() + "补发奖励失败，一分钟后重新补发");
						}
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 龙虎斗，补发发奖失败的投注记录
	 */
	private void fixTigerReward() {
		if (System.currentTimeMillis() > 0) {// 暂不开启补发操作
			return;
		}
		try {
			List<TigerPutRecord> records = tigerService.getFailedRecords();
			for (TigerPutRecord record : records) {
				String userId = record.getUserId();
				BigDecimal putMoney = record.getPutMoney();
				BigDecimal gainMoney = record.getGainMoney();
				try {
					// 补发奖励
					boolean success = accountService.plusBalance(userId, putMoney.add(gainMoney).toPlainString());
					if (success) {
						record.setStatus(3);
						tigerService.updateRecord(record);
					} else {
						_log.error("龙虎斗补发奖励失败...txId:" + record.getTxId());
					}
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}