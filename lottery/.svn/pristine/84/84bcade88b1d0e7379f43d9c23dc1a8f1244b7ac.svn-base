package com.stip.net.scheduled;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.TextMessage;

import com.google.gson.GsonBuilder;
import com.lottery.net.utils.Constants;
import com.lottery.net.utils.DBCache;
import com.lottery.net.utils.JsonUtil;
import com.stip.net.entity.DBDiceBetting;
import com.stip.net.entity.LotteryUser;
import com.stip.net.entity.tiger.TigerPutRecord;
import com.stip.net.entity.tiger.TigerRoom;
import com.stip.net.entity.tiger.TigerTimeState;
import com.stip.net.imessage.IMWebSocketHandler;
import com.stip.net.kafka.utils.PublicMethod;
import com.stip.net.main.MainData;
import com.stip.net.main.MsgCode;
import com.stip.net.service.AccountService;
import com.stip.net.service.LotteryService;
import com.stip.net.service.LotteryUserService;
import com.stip.net.service.TigerService;
import com.stip.net.service.UserBetService;
import com.stip.net.vo.Message;

import io.eblock.eos4j.api.vo.account.Account;
import net.sf.json.JSONObject;

@Component
public class Sec1Task {
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	private IMWebSocketHandler handler;
	@Autowired
	private AccountService accountService;
	@Autowired
	private LotteryService lotteryService;
	@Autowired
	private TigerService tigerService;
	@Autowired
	private LotteryUserService lotteryUserService;
	@Autowired
	private UserBetService userBetService;
	@Autowired
	private ThreadPoolTaskExecutor threadPoolTaskExecutor;
	public Message msg;

	@Scheduled(cron = "*/1 * * * * ?")
	public void execute() {
		sendMessageToDiceUser();
		sendTigerRoomDjs();
		scanTigerConfirm();
	}

	/**
	 * 骰子，给用户发送信息
	 */
	private void sendMessageToDiceUser(){
		try {
			//测试
			List<DBDiceBetting> dicebetting=DBCache.getInstance().getDiceAwardPrizes1();
//			List<DBDiceBetting> dicebetting=DBCache.getInstance().getDiceAwardPrizes();
			if (dicebetting != null && dicebetting.size() > 0) {
				//中奖用户列表
				List<DBDiceBetting> dicePeize=new ArrayList<DBDiceBetting>();
				for(DBDiceBetting ddb:dicebetting){
					try {
						// 判断用户是否中奖
						if(ddb.getState()==1){
							dicePeize.add(ddb);
							if(!accountService.plusBalanceFromDice(ddb.getAccount(), ddb.getPrizeEOS())){
								logger.error("骰子给用户"+ddb.getAccount()+"发奖"+ddb.getPrizeEOS()+"失败");
								ddb.setState(2);
							}
						}
						String prize = new DecimalFormat("0.0000").format(Double.parseDouble(ddb.getBettingEOS()));
						ddb.setBettingEOS(prize);
						msg = new Message();
						msg.setDate(new Date());
						msg.setFrom("diceUserPrize");
						msg.setFromName("");
						msg.setText(JSONObject.fromObject(ddb) + "");
						String bulder = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create().toJson(msg);
						//给用户发送中奖消息
						handler.sendMessageToUser(ddb.getAccount(), new TextMessage(bulder));
						//邀请奖励发放
						PublicMethod.invitationAward(new BigDecimal(ddb.getBettingEOS()),ddb.getAccount(), lotteryUserService, accountService, logger);
						// 推送骰子奖池余额
						Map<String, Object> dmap = new HashMap<>();
						Account dicePool = accountService.getAccount(Constants.account_dice);
						dmap.put("balance", dicePool.getCoreLiquidBalance());
						String dJson = JsonUtil.buildJson(MsgCode.DICE_POOL_BALANCE, dmap);
						handler.broadcast(new TextMessage(dJson), Constants.DICE_TYPE);
					} catch (Exception e) {
						e.printStackTrace();
					}
					System.out.println(ddb.toString());
				}
				lotteryService.addDBDiceBetting(dicebetting);
				if(dicePeize.size() > 0){
					Collections.sort(dicePeize);
					try {
						msg = new Message();
						msg.setDate(new Date());
						msg.setFrom("diceAllPrize");
						msg.setFromName("");
						msg.setText(JSONObject.fromObject(dicePeize.get(0)) + "");
						String bulder = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create().toJson(msg);
						//展示中奖消息
						handler.broadcast(new TextMessage(bulder), Constants.DICE_TYPE);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				DBCache.getInstance().getDiceBettings().removeAll(dicebetting);
			}			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 龙虎斗，推送房间倒计时
	 */
	private void sendTigerRoomDjs() {
		try {
			for (TigerRoom room : MainData.tigerRooms) {
				long now = System.currentTimeMillis();
				long lastUpdate = room.getLastUpdate();
				long djs = 0;
				long period = 0;
				TigerTimeState state = TigerTimeState.getEnumById(room.getState());
				switch (state) {
				case put:
					period = Constants.TIGER_PUT_TIME;
					break;
				case open:
					period = Constants.TIGER_OPEN_TIME;
					break;
				default:
					break;
				}
				djs = lastUpdate + period - now;
				if (djs < 0) {
					djs = 0;
				}
				// 通知客户端
				Map<String, Object> map = new HashMap<>();
				map.put("roomId", room.getId());
				map.put("djs", djs / 1000);
				String json = JsonUtil.buildJson(MsgCode.TIGER_ROOM_DJS, map);
				try {
					handler.broadcastToSome(room.getHeads(), new TextMessage(json));
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 扫描龙虎斗投注确认表，更新投注记录
	 */
	private void scanTigerConfirm() {
		List<String> txIds = tigerService.getAllConfirm();
		for (String txId : txIds) {
			TigerPutRecord record = tigerService.getRecordByTxId(txId);
			if (record == null) {
				continue;
			}
			record.setTxStatus(1);
			tigerService.updateRecord(record);
			tigerService.deleteConfirm(txId);
			threadPoolTaskExecutor.execute(new Runnable() {
				public void run() {
					//  新用户奖励
					PublicMethod.newUser(record.getUserId(), userBetService, lotteryUserService, accountService, logger);
					//  邀请奖励发放
					PublicMethod.invitationAward(record.getPutMoney(), record.getUserId(), lotteryUserService, accountService, logger);
				}
			});
		}
	}
}