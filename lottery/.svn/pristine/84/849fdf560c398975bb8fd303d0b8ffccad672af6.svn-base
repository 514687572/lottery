package com.stip.net.scheduled;

import java.math.BigDecimal;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Component;

import com.stip.net.entity.DBDiceBetting;
import com.stip.net.entity.tiger.TigerHistory;
import com.stip.net.entity.tiger.TigerOption;
import com.stip.net.entity.tiger.TigerPutRecord;
import com.stip.net.main.MainData;
import com.stip.net.service.AccountService;
import com.stip.net.service.LotteryService;
import com.stip.net.service.TigerService;

@Component
public class Min1Task {
	protected final Logger _log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private TigerService tigerService;
	@Autowired
	private AccountService accountService;
	@Autowired 
	private LotteryService lotteryService;
	@Autowired
	private ThreadPoolTaskExecutor threadPoolTaskExecutor;

	@Scheduled(cron = "0 0/1 * * * ?")
	public void execute() {
		reissuePrizeEOS();
		fixTigerReward();
		openAndSendLateTiger();
		saveAll();
	}

	/**
	 * 定时存储游戏数据
	 */
	private void saveAll() {
		try {
			_log.info("save All start..................................");
			tigerService.saveAllRooms(MainData.tigerRooms);
			_log.info("save All over..................................");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 骰子补发奖励
	 */
	private void reissuePrizeEOS() {
		try {
			List<DBDiceBetting> diceBettings = lotteryService.getDiceState();
			if (diceBettings.size() > 0) {
				_log.info("执行骰子补发奖励操作");
				for (DBDiceBetting ddb : diceBettings) {
					try {
						if (accountService.plusBalanceFromDice(ddb.getAccount(), ddb.getPrizeEOS())) {
							lotteryService.updateDiceStateto(ddb.getAccount());
						} else {
							_log.error("骰子给用户：" + ddb.getAccount() + "补发奖励失败，一分钟后重新补发");
						}
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 龙虎斗，补发发奖失败的投注记录
	 */
	private void fixTigerReward() {
		if (System.currentTimeMillis() > 0) {// 暂不开启补发操作
			return;
		}
		try {
			List<TigerPutRecord> records = tigerService.getFailedRecords();
			for (TigerPutRecord record : records) {
				String userId = record.getUserId();
				BigDecimal putMoney = record.getPutMoney();
				BigDecimal gainMoney = record.getGainMoney();
				try {
					// 补发奖励
					boolean success = accountService.plusBalance(userId, putMoney.add(gainMoney).toPlainString());
					if (success) {
						record.setStatus(3);
						tigerService.updateRecord(record);
					} else {
						_log.error("龙虎斗补发奖励失败...txId:" + record.getTxId());
					}
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 龙虎斗，补发投注过于延迟而错过开奖的奖励
	 */
	private void openAndSendLateTiger() {
		try {
			// 查询超过2分钟仍未开奖的投注记录
			List<TigerPutRecord> records = tigerService.getExpiredRecords(System.currentTimeMillis(), 2L * 1000);
			if (records.size() == 0) {
				return;
			}
			threadPoolTaskExecutor.execute(new Runnable() {
				@Override
				public void run() {
					// 更新开奖标记和开奖时间
					for (int i = 0; i < records.size(); i++) {
						TigerPutRecord record = records.get(i);
						int qid = record.getQid();
						int roomId = record.getRoomId();
						TigerHistory th = tigerService.getTigerHistory(qid, roomId);
						if (th == null) {
							_log.error("open expird tiger record failed! history not found! qid: " + qid + ", roomId: " + roomId);
							continue;
						}
						// 使得每条记录开奖时间不同，便于查询
						record.setOpenTimeSpt(th.getOpenTimeSpt() + i + 200);
						List<Integer> goodOpts = MainData.getGoodOpts(th.getLp(), th.getHp());
						// 更新中奖金额
						if (goodOpts.contains(record.getOpt())) {
							record.setStatus(2);
							TigerOption opt = TigerOption.getEnumById(record.getOpt());
							BigDecimal gainMoney = record.getPutMoney().multiply(new BigDecimal(opt.getPei()))
									.divide(new BigDecimal(1000));
							record.setGainMoney(gainMoney);
						} else {
							record.setStatus(1);
						}
						// 更新到数据库
						tigerService.updateRecord(record);
					}
					// 发奖
					for (TigerPutRecord record : records) {
						// 排除未中奖和未投注确认的
						if (record.getStatus() != 2 || record.getTxStatus() != 1) {
							continue;
						}
						String userId = record.getUserId();
						BigDecimal putMoney = record.getPutMoney();
						BigDecimal gainMoney = record.getGainMoney();
						try {
							// 发奖转账
							boolean success = accountService.plusBalance(userId, putMoney.add(gainMoney).toPlainString());
							if (success) {
								record.setStatus(3);
								System.out.println("发奖成功！ userId: " + userId + ", money: " + putMoney.add(gainMoney).toPlainString());
							} else {
								record.setStatus(-1);
								_log.error("发奖失败！ txId: " + record.getTxId());
							}
							// 发奖之后，更新投注记录
							tigerService.updateRecord(record);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			});
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}